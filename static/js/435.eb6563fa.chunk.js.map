{"version":3,"file":"static/js/435.eb6563fa.chunk.js","mappings":"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","sources":["helpComponents/NotFound/NotFound.tsx","pages/LoginPage/CountriesContext.ts","components/CountriesPopup/CountriesList/CountriesList.tsx","pages/LoginPage/LoginPage.constants.ts","components/CountriesPopup/CountriesPopup.styles.ts","components/CountriesPopup/CountriesPopup.tsx","components/CountriesPopup/CountriesPopup.utils/getCountryByDualCode.ts","components/CountriesPopup/CountriesPopup.utils/getCountriesByPattern.ts","components/Countries/Countries.styles.ts","components/Countries/Countries.tsx","helpers/isNumber.ts","hooks/useMask.ts","pages/LoginPage/LoginPage.styles.ts","pages/LoginPage/index.tsx","pages/LoginPage/LoginPage.hooks/useLoginPageInputs.ts","pages/LoginPage/LoginPage.utils/index.ts","pages/LoginPage/LoginPage.hooks/useLogin.ts"],"sourcesContent":["import React, { FC } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 10px 0;\r\n  font-size: ${props => props.theme.fontSizes.normal};\r\n  color: ${props => props.theme.colors.paragraph};\r\n`;\r\n\r\nconst NotFound: FC = ({children}) => {\r\n  return (\r\n    <Container>{children}</Container>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import { createContext } from 'react';\r\nimport { ICountriesContext } from '@pages/LoginPage/LoginPage.typings';\r\n\r\nexport const CountriesContext = createContext<ICountriesContext | null>(null);","import React, { FC, useContext, useMemo } from 'react';\r\nimport NotFound from '@helpComponents/NotFound/NotFound';\r\nimport { ICountry } from '@components/CountriesPopup/CountriesPopup';\r\nimport { CountriesContext } from '@pages/LoginPage/CountriesContext';\r\n\r\nimport ListItem from '../../../shared/ListItem/ListItem';\r\n\r\ninterface ICountriesListProps {\r\n  countries: ICountry[];\r\n  hidePopup: () => void;\r\n}\r\n\r\nconst CountriesList: FC<ICountriesListProps> = ({countries, hidePopup}) => {\r\n  const countriesContext = useContext(CountriesContext);\r\n\r\n  if (!countriesContext) {\r\n    return null;\r\n  }\r\n\r\n  const {setDualCode, setSelectedCountry, setPhoneMask} = countriesContext;\r\n\r\n  const onCountryClick = (country: ICountry) => {\r\n    setDualCode(`+${country.dualCode}`);\r\n    setPhoneMask(country.mask);\r\n    setSelectedCountry(country.name);\r\n    hidePopup();\r\n  };\r\n\r\n  const countriesMemo = useMemo(() => (\r\n    countries.map(country =>\r\n      <ListItem\r\n        text={country.name}\r\n        key={country.name + country.dualCode}\r\n        subtext={`+${country.dualCode}`}\r\n        onClick={() => onCountryClick(country)}\r\n      />)), [countries]);\r\n\r\n  return (\r\n    countriesMemo.length ? <>{countriesMemo}</> : <NotFound>Country not found</NotFound>\r\n  );\r\n};\r\n\r\nexport default CountriesList;\r\n","export const COUNTRY_NOT_SELECTED = 'Country Code';\r\nexport const INVALID_PHONE_NUMBER = 'Invalid phone number. Please try again.';\r\nexport const INVALID_COUNTRY_CODE = 'Invalid country code';\r\nexport const INVALID_NICKNAME = 'Nickname must have 5 more symbols';\r\n\r\nexport const DUAL_CODE_PATTERN = /^\\+\\d{0,4}$/;\r\nexport const NICKNAME_PATTERN = /^[a-zA-Z0-9_]{0,20}$/;","import styled from 'styled-components';\r\nimport { Scroll } from '@styled-components/Scroll';\r\n\r\nexport const CountriesContainer = styled(Scroll)`\r\n  overflow: auto;\r\n  height: 55vh;\r\n  background-color: ${props => props.theme.colors.bgColor};\r\n`;","import React, { FC, useContext, useEffect, useMemo } from 'react';\r\nimport useFetch from '@hooks/useFetch';\r\nimport CountriesList from '@components/CountriesPopup/CountriesList/CountriesList';\r\nimport useInput from '@hooks/useInput';\r\nimport { getCountriesByPattern } from '@components/CountriesPopup/CountriesPopup.utils/getCountriesByPattern';\r\nimport { CountriesContext } from '@pages/LoginPage/CountriesContext';\r\nimport { ICountriesContext } from '@pages/LoginPage/LoginPage.typings';\r\nimport { COUNTRY_NOT_SELECTED, INVALID_COUNTRY_CODE } from '@pages/LoginPage/LoginPage.constants';\r\nimport { getCountryByDualCode } from '@components/CountriesPopup/CountriesPopup.utils/getCountryByDualCode';\r\n\r\nimport Popup from '../../shared/Popup/Popup';\r\nimport Input from '../../shared/Input/Input';\r\n\r\nimport { CountriesContainer } from './CountriesPopup.styles';\r\n\r\n\r\nexport interface ICountry {\r\n  name: string;\r\n  dualCode: string;\r\n  mask: string;\r\n}\r\n\r\nconst CountriesPopup: FC<{ active: boolean, hidePopup: () => void }> = ({active, hidePopup}) => {\r\n  const {data: countries} = useFetch<ICountry[]>('/countries/en');\r\n\r\n  const [countryValue, setCountryValue] = useInput('');\r\n\r\n  const {dualCode, setPhoneMask, setSelectedCountry} = useContext(CountriesContext) || {} as ICountriesContext;\r\n  useEffect(() => {\r\n    if (dualCode === '+') {\r\n      setSelectedCountry(COUNTRY_NOT_SELECTED);\r\n      setPhoneMask('');\r\n      return;\r\n    }\r\n    const country = getCountryByDualCode(countries || [], dualCode.slice(1));\r\n\r\n    if (!country) {\r\n      setSelectedCountry(INVALID_COUNTRY_CODE);\r\n      setPhoneMask('');\r\n    } else {\r\n      setSelectedCountry(country.name);\r\n      setPhoneMask(country.mask);\r\n    }\r\n  }, [dualCode]);\r\n\r\n  useEffect(() => {\r\n    if (!active) {\r\n      // надо, чтобы пользователь не видел удаление поля страны в попапе при его закрытии\r\n      setTimeout(() => setCountryValue(''), 200);\r\n    }\r\n  }, [active]);\r\n\r\n  const foundedCountries = useMemo(() => getCountriesByPattern(countries, countryValue), [countryValue, countries]);\r\n\r\n  return (\r\n    <Popup active={active} hide={hidePopup}>\r\n      <Popup.Header title=\"Select Country\">\r\n        <Input value={countryValue} setValue={setCountryValue} placeholder=\"Search\">\r\n          <Input.Search searchIcon timesIcon/>\r\n        </Input>\r\n      </Popup.Header>\r\n      <Popup.Content bordered>\r\n        <CountriesContainer>\r\n          {countries &&\r\n          <CountriesList countries={foundedCountries} hidePopup={hidePopup}/>}\r\n        </CountriesContainer>\r\n      </Popup.Content>\r\n      <Popup.Footer cancelTitle=\"Close\"/>\r\n    </Popup>\r\n  );\r\n};\r\n\r\nexport default CountriesPopup;\r\n","import { ICountry } from '@components/CountriesPopup/CountriesPopup';\r\n\r\nexport const getCountryByDualCode = (countries: ICountry[], dualCode): ICountry | undefined => {\r\n  return countries.find(country => country.dualCode === dualCode);\r\n};","import { ICountry } from '@components/CountriesPopup/CountriesPopup';\r\n\r\nexport const getCountriesByPattern = (countries: ICountry[] | null, text: string): ICountry[] => {\r\n  if (!countries) {\r\n    return [];\r\n  }\r\n  return countries.filter(country => country.name.toLowerCase().includes(text.toLowerCase()));\r\n};","import styled from 'styled-components';\r\n\r\n\r\nexport const CountriesContainer = styled.div`\r\n  position: relative;\r\n  padding: 5px 0;\r\n  border-bottom: 1px solid ${props => props.theme.colors.inputBorder};\r\n  cursor: pointer;\r\n  \r\n  svg {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 0;\r\n    transform: translateY(-50%);\r\n    fill: ${props => props.theme.colors.inputColor}\r\n  }\r\n`;","import React, { FC, useCallback, useState } from 'react';\r\nimport CountriesPopup from '@components/CountriesPopup/CountriesPopup';\r\n\r\n\r\nimport { icons } from '../../icons';\r\n\r\nimport { CountriesContainer } from './Countries.styles';\r\n\r\n\r\nconst Countries: FC<{selectedCountry}> = React.memo(({selectedCountry}) => {\r\n  const [activePopup, setActivePopup] = useState(false);\r\n\r\n  const openPopup = () => {\r\n    setActivePopup(true);\r\n  };\r\n\r\n  const hidePopup = useCallback(() => {\r\n    setActivePopup(false);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <CountriesContainer onClick={openPopup}>\r\n      {icons.hide}\r\n      <span>{selectedCountry}</span>\r\n      <CountriesPopup active={activePopup} hidePopup={hidePopup}/>\r\n    </CountriesContainer>\r\n  );\r\n});\r\n\r\nexport default Countries;\r\n","\r\nconst isNumber = (char: string) => /\\d/.test(char);\r\n\r\nexport default isNumber;","import React, { useState } from 'react';\r\n\r\nimport isNumber from '../helpers/isNumber';\r\n\r\n\r\nconst isCorrectByMask = (value: string, mask: string) => {\r\n  if (value.length > mask.length) return false;\r\n\r\n  const lastInputIndex = value.length - 1;\r\n\r\n  if (isNumber(value[lastInputIndex]) !== isNumber(mask[lastInputIndex]) ||\r\n        (mask[lastInputIndex] !== value[lastInputIndex] && !isNumber(value[lastInputIndex]))) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst inputWithMask = (value: string, mask: string) => {\r\n  let newValue = value.slice(0, value.length - 1);\r\n  let maskIndex = value.length - 1;\r\n\r\n  while (!isNumber(mask[maskIndex]) && mask[maskIndex]) {\r\n    newValue += mask[maskIndex];\r\n    maskIndex++;\r\n  }\r\n\r\n  return newValue + value[value.length - 1];\r\n};\r\n\r\nconst useMask = (mask: string): [string, (e: React.FormEvent<EventTarget> | string) => void] => {\r\n  const [value, setValue] = useState<string>('');\r\n\r\n  const changeValue = (e: React.FormEvent<EventTarget> | string) => {\r\n    if (typeof e === 'string') {\r\n      setValue(e);\r\n      return;\r\n    }\r\n\r\n    const input = e.target as HTMLInputElement;\r\n    if (isNumber(input.value[input.value.length - 1]) && !isNumber(mask[input.value.length - 1])) {\r\n      input.value = inputWithMask(input.value, mask);\r\n    }\r\n    isCorrectByMask(input.value, mask) && setValue(input.value);\r\n  };\r\n\r\n  return [value, changeValue];\r\n};\r\n\r\nexport default useMask;","import styled from 'styled-components';\r\n\r\nexport const LoginContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background-color: ${props => props.theme.colors.bgColor};\r\n\r\n  .phone-container {\r\n    display: flex;\r\n\r\n    & > div:first-child {\r\n      width: 80px;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const LoginTitle = styled.h1`\r\n  font-size: ${props => props.theme.fontSizes.medium};\r\n  margin-bottom: 5px;\r\n  color: ${props => props.theme.colors.heading};\r\n\r\n`;\r\n\r\nexport const LoginSubtitle = styled.p`\r\n  font-size: ${props => props.theme.fontSizes.extraNormal};\r\n  color: ${props => props.theme.colors.paragraph};\r\n  width: 300px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const PhoneError = styled.div`\r\n  display: block;\r\n  margin: 10px 0;\r\n  height: 15px;\r\n  font-size: ${props => props.theme.fontSizes.small};\r\n  color: ${props => props.theme.colors.error};\r\n  visibility: hidden;\r\n  transition: .2s;\r\n  opacity: 0;\r\n\r\n  &.visible {\r\n    opacity: 1;\r\n    visibility: visible;\r\n  }\r\n`;","import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport cn from 'classnames';\r\nimport { useAppSelector } from '@hooks/useAppSelector';\r\nimport Countries from '@components/Countries/Countries';\r\nimport { useLoginPageInputs } from '@pages/LoginPage/LoginPage.hooks/useLoginPageInputs';\r\nimport { useLogin } from '@pages/LoginPage/LoginPage.hooks/useLogin';\r\nimport { CountriesContext } from '@pages/LoginPage/CountriesContext';\r\n\r\nimport Input from '../../shared/Input/Input';\r\nimport Button from '../../shared/Button/Button';\r\n\r\nimport {\r\n  LoginContainer,\r\n  LoginSubtitle,\r\n  LoginTitle,\r\n  PhoneError\r\n} from './LoginPage.styles';\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const isAuth = useAppSelector(({user}) => user.isAuth);\r\n  const backendError = useAppSelector(({user}) => user.backendError);\r\n  const [phoneMask, setPhoneMask] = useState('');\r\n\r\n  const {phoneInput, dualCodeInput, nicknameInput, selectedCountryInput} = useLoginPageInputs(phoneMask);\r\n  const login = useLogin(phoneInput, dualCodeInput, nicknameInput);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const onLogin = () => {\r\n    const errorMessage = phoneInput.errorMessage || selectedCountryInput.errorMessage || nicknameInput.errorMessage;\r\n\r\n    if (errorMessage) {\r\n      setErrorMessage(errorMessage);\r\n      return;\r\n    }\r\n\r\n    login();\r\n  };\r\n\r\n  const onDualCodeInput = e => {\r\n    phoneInput.setValue('');\r\n    dualCodeInput.setValue(e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isAuth)\r\n      navigate('/');\r\n  }, [isAuth]);\r\n\r\n  useEffect(() => {\r\n    if (backendError) {\r\n      setErrorMessage(backendError);\r\n    }\r\n  }, [backendError]);\r\n\r\n  useEffect(() => {\r\n    setErrorMessage('');\r\n  }, [phoneInput.value, dualCodeInput.value, nicknameInput.value]);\r\n\r\n  return (\r\n    <CountriesContext.Provider value={{\r\n      setDualCode: dualCodeInput.setValue,\r\n      setPhoneMask,\r\n      setSelectedCountry: selectedCountryInput.setValue,\r\n      dualCode: dualCodeInput.value\r\n    }}>\r\n      <LoginContainer>\r\n        <div>\r\n          <LoginTitle>You Phone Number</LoginTitle>\r\n          <LoginSubtitle>Please confirm your country code and enter your mobile phone number.</LoginSubtitle>\r\n          <Countries selectedCountry={selectedCountryInput.value}/>\r\n          <div className=\"phone-container\">\r\n            <Input value={dualCodeInput.value} setValue={onDualCodeInput} placeholder=\"\">\r\n              <Input.TextField type=\"tel\"/>\r\n            </Input>\r\n            <Input value={phoneInput.value} setValue={phoneInput.setValue} placeholder={phoneMask}>\r\n              <Input.TextField type=\"tel\"/>\r\n            </Input>\r\n          </div>\r\n          <Input value={nicknameInput.value} setValue={nicknameInput.setValue} placeholder=\"Enter your nickname\">\r\n            <Input.TextField/>\r\n          </Input>\r\n          <PhoneError className={cn({visible: errorMessage})}>{errorMessage}</PhoneError>\r\n          <Button onClick={onLogin} text=\"log in\" fullButton/>\r\n        </div>\r\n      </LoginContainer>\r\n    </CountriesContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import useInput from '@hooks/useInput';\r\nimport useMask from '@hooks/useMask';\r\nimport { selectedCountryError, nicknameErrorMessage, phoneErrorMessage } from '@pages/LoginPage/LoginPage.utils';\r\nimport { COUNTRY_NOT_SELECTED, DUAL_CODE_PATTERN, NICKNAME_PATTERN } from '@pages/LoginPage/LoginPage.constants';\r\nimport { IInputObject } from '@pages/LoginPage/LoginPage.typings';\r\n\r\n\r\nexport const useLoginPageInputs = (phoneMask: string): {[key: string]: IInputObject} => {\r\n\r\n  const [dualCodeValue, setDualCodeValue] = useInput('+', DUAL_CODE_PATTERN);\r\n  const [phoneValue, setPhoneValue] = useMask(phoneMask);\r\n  const [nicknameValue, setNicknameValue] = useInput('', NICKNAME_PATTERN);\r\n  const [selectedCountryValue, setSelectedCountryValue] = useInput(COUNTRY_NOT_SELECTED);\r\n\r\n  return {\r\n    dualCodeInput: {\r\n      value: dualCodeValue,\r\n      setValue: setDualCodeValue,\r\n      errorMessage: ''\r\n    },\r\n    phoneInput: {\r\n      value: phoneValue,\r\n      setValue: setPhoneValue,\r\n      errorMessage: phoneErrorMessage(phoneValue, phoneMask)\r\n    },\r\n    nicknameInput: {\r\n      value: nicknameValue,\r\n      setValue: setNicknameValue,\r\n      errorMessage: nicknameErrorMessage(nicknameValue)\r\n    },\r\n    selectedCountryInput: {\r\n      value: selectedCountryValue,\r\n      setValue: setSelectedCountryValue,\r\n      errorMessage: selectedCountryError(selectedCountryValue)\r\n    }\r\n  };\r\n};","import isNumber from '@helpers/isNumber';\n\nimport {\n  COUNTRY_NOT_SELECTED,\n  INVALID_COUNTRY_CODE,\n  INVALID_NICKNAME,\n  INVALID_PHONE_NUMBER\n} from '../LoginPage.constants';\n\n\nexport const phoneErrorMessage = (phone: string, mask: string) => {\n  return phone.length === mask.length ? '' : INVALID_PHONE_NUMBER;\n};\n\nexport const selectedCountryError = (selectedCountry: string) => {\n  return selectedCountry === INVALID_COUNTRY_CODE || selectedCountry === COUNTRY_NOT_SELECTED ?\n    INVALID_COUNTRY_CODE :\n    '';\n};\n\nexport const nicknameErrorMessage = (nickname: string) => (nickname.length < 3 ? INVALID_NICKNAME : '');\n\nexport const getNumericPhone = (phone: string, dualCode: string) => {\n  return (dualCode + phone).split('').filter(char => isNumber(char)).join('');\n};","import { fetchUserInfo } from '@reducers/userSlice/userReducer';\r\nimport { getNumericPhone } from '@pages/LoginPage/LoginPage.utils';\r\nimport { useAppDispatch } from '@hooks/useAppSelector';\r\nimport { IInputObject } from '@pages/LoginPage/LoginPage.typings';\r\nimport { initializeDialogs } from '@reducers/dialogSlice/dialogSlice';\r\n\r\nexport const useLogin = (phoneInput: IInputObject, dualCodeInput: IInputObject, nicknameInput: IInputObject) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  return () => {\r\n    dispatch(fetchUserInfo({\r\n      userPhone: getNumericPhone(phoneInput.value, dualCodeInput.value),\r\n      nickname: nicknameInput.value\r\n    }))\r\n      .unwrap()\r\n      .then(data => {\r\n        dispatch(initializeDialogs(data.dialogs));\r\n      });\r\n  };\r\n};"],"names":["Container","styled","props","theme","fontSizes","normal","colors","paragraph","children","CountriesContext","createContext","countries","hidePopup","countriesContext","useContext","setDualCode","setSelectedCountry","setPhoneMask","countriesMemo","useMemo","map","country","ListItem","text","name","subtext","dualCode","onClick","mask","onCountryClick","length","COUNTRY_NOT_SELECTED","INVALID_COUNTRY_CODE","DUAL_CODE_PATTERN","NICKNAME_PATTERN","CountriesContainer","Scroll","bgColor","active","useFetch","data","useInput","countryValue","setCountryValue","useEffect","find","getCountryByDualCode","slice","setTimeout","foundedCountries","filter","toLowerCase","includes","getCountriesByPattern","Popup","hide","title","Input","value","setValue","placeholder","searchIcon","timesIcon","bordered","cancelTitle","inputBorder","inputColor","React","selectedCountry","useState","activePopup","setActivePopup","useCallback","icons","char","test","e","input","target","isNumber","newValue","maskIndex","inputWithMask","lastInputIndex","isCorrectByMask","LoginContainer","LoginTitle","medium","heading","LoginSubtitle","extraNormal","PhoneError","small","error","isAuth","useAppSelector","user","backendError","phoneMask","nickname","phone","dualCodeValue","setDualCodeValue","useMask","phoneValue","setPhoneValue","nicknameValue","setNicknameValue","selectedCountryValue","setSelectedCountryValue","dualCodeInput","errorMessage","phoneInput","nicknameInput","selectedCountryInput","useLoginPageInputs","login","dispatch","useAppDispatch","fetchUserInfo","userPhone","split","join","unwrap","then","initializeDialogs","dialogs","useLogin","navigate","useNavigate","setErrorMessage","Provider","className","type","cn","visible","Button","fullButton"],"sourceRoot":""}